Index: feature-main/src/main/java/com/geektechkb/feature_main/presentation/ui/fragments/profil/ProfileFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.geektechkb.feature_main.presentation.ui.fragments.profil\r\n\r\nimport android.Manifest\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.net.Uri\r\nimport android.util.Base64\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.navigation.fragment.navArgs\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport by.kirich1409.viewbindingdelegate.viewBinding\r\nimport com.geektechkb.core.base.BaseFragment\r\nimport com.geektechkb.core.data.local.preferences.UserPreferencesHelper\r\nimport com.geektechkb.core.extensions.*\r\nimport com.geektechkb.feature_main.R\r\nimport com.geektechkb.feature_main.databinding.FragmentProfileBinding\r\nimport com.geektechkb.feature_main.presentation.ui.adapters.GalleryPicturesAdapter\r\nimport com.geektechkb.feature_main.presentation.ui.fragments.gallerydialogbotomsheet.GalleryBottomSheetViewModel\r\nimport com.geektechkb.feature_main.presentation.ui.models.enums.CropPhotoRequest\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\r\nimport com.google.android.material.card.MaterialCardView\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.coroutines.launch\r\nimport java.io.ByteArrayOutputStream\r\nimport java.util.*\r\nimport javax.inject.Inject\r\n\r\n@AndroidEntryPoint\r\nclass ProfileFragment :\r\n    BaseFragment<FragmentProfileBinding, ProfileViewModel>(R.layout.fragment_profile) {\r\n\r\n    override val binding by viewBinding(FragmentProfileBinding::bind)\r\n    override val viewModel: ProfileViewModel by viewModels()\r\n    private val galleryViewModel: GalleryBottomSheetViewModel by viewModels()\r\n    private val args by navArgs<ProfileFragmentArgs>()\r\n    private var name: String? = null\r\n    private var lastName: String? = null\r\n    private var profileAvatar: String? = null\r\n    private var savedUserStatus: String? = null\r\n    private var bottomSheetBehavior: BottomSheetBehavior<MaterialCardView>? = null\r\n    private val adapter = GalleryPicturesAdapter(this::onSelect)\r\n    private val pictures = ArrayList<GalleryPicture>()\r\n    private val adapter = GalleryPicturesAdapter(this::onSelect, pictures)\r\n\r\n    override fun assembleViews() {\r\n        binding.chanceBtn.setOnClickListener {\r\n            findNavController().navigateUp()\r\n        }\r\n    }\r\n\r\n    @Inject\r\n    lateinit var preferences: UserPreferencesHelper\r\n\r\n    override fun assembleViews() {\r\n        makeSwitchCheckedIfPhoneNumberIsHidden()\r\n    }\r\n\r\n    private fun makeSwitchCheckedIfPhoneNumberIsHidden() {\r\n        binding.switchHidePhoneNumber.isChecked = preferences.isPhoneNumberHidden == true\r\n    }\r\n\r\n    override fun initialize() {\r\n        requestReadStoragePermission()\r\n    }\r\n\r\n    private fun requestReadStoragePermission() {\r\n        val readStorage = Manifest.permission.READ_EXTERNAL_STORAGE\r\n        if (ContextCompat.checkSelfPermission(\r\n                requireContext(),\r\n                readStorage\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            requestPermissions(arrayOf(readStorage), 3)\r\n        } else initBottomSheetRecycler()\r\n        setupBottomSheet()\r\n    }\r\n\r\n    override fun setupListeners() {\r\n        interactWithToolbarMenu()\r\n        hideBottomSheetOnClick()\r\n        navigateToNotificationsAndSoundsFragment()\r\n        navigateToLanguagesFragment()\r\n        hidePhoneNumberOnSwitchChecked()\r\n        binding.openBottomSheet.setOnClickListener {\r\n            binding.apply {\r\n                openGalleryBottomSheet(\r\n                    galleryBottomSheet.galleryBottomSheetDialog,\r\n                    bottomSheetBehavior,\r\n                    galleryBottomSheet.appbarLayout,\r\n                    coordinatorGallery,\r\n                    actionOnDialogStateDragging = {\r\n                        openBottomSheet.isVisible = false\r\n                    }, actionOnDialogStateExpanded = {\r\n                        openBottomSheet.isVisible = false\r\n                    }, actionOnDialogStateHidden = {\r\n                        openBottomSheet.isVisible = true\r\n                    }\r\n                )\r\n            }\r\n        }\r\n        binding.toolbarButton.setOnClickListener {\r\n            findNavController().navigateUp()\r\n        }\r\n    }\r\n\r\n    private fun hideBottomSheetOnClick() {\r\n        binding.galleryBottomSheet.imBack.setOnSingleClickListener {\r\n            binding.coordinatorGallery.isVisible = false\r\n            binding.openBottomSheet.isVisible = true\r\n        }\r\n    }\r\n\r\n    private fun navigateToNotificationsAndSoundsFragment() {\r\n        binding.vNotifications.setOnSingleClickListener {\r\n            findNavController().navigateSafely(R.id.action_profileFragment_to_notificationsAndSoundsFragment)\r\n        }\r\n    }\r\n\r\n    private fun navigateToLanguagesFragment() {\r\n        binding.vLanguage.setOnSingleClickListener {\r\n            findNavController().navigateSafely(R.id.action_profileFragment_to_languagesFragment)\r\n        }\r\n    }\r\n\r\n    private fun hidePhoneNumberOnSwitchChecked() {\r\n        binding.switchHidePhoneNumber.actionOnCheckedChange {\r\n            preferences.isPhoneNumberHidden = it\r\n            viewModel.hideUserPhoneNumber(it)\r\n        }\r\n    }\r\n\r\n    private fun interactWithToolbarMenu() = with(binding) {\r\n        binding.menuToolbar.setOnMenuItemClickListener {\r\n            when (it.itemId) {\r\n                R.id.edit_profile -> {\r\n                    findNavController().navigateSafely(R.id.action_profileFragment_to_editProfileFragment)\r\n                    true\r\n                }\r\n                R.id.choose_avatar -> {\r\n                    openGalleryBottomSheet(\r\n                        galleryBottomSheet.galleryBottomSheetDialog,\r\n                        bottomSheetBehavior,\r\n                        galleryBottomSheet.appbarLayout,\r\n                        coordinatorGallery,\r\n                        actionOnDialogStateDragging = {\r\n                            openBottomSheet.isVisible = false\r\n                        }, actionOnDialogStateExpanded = {\r\n                            openBottomSheet.isVisible = false\r\n                        }, actionOnDialogStateHidden = {\r\n                            openBottomSheet.isVisible = true\r\n                        }\r\n                    )\r\n                    true\r\n                }\r\n                R.id.delete_avatar -> {\r\n                    binding.imImageProfile.setImageDrawable(null)\r\n                    binding.imImageProfile.drawable.toString()\r\n                    viewLifecycleOwner.lifecycleScope.launchWhenStarted {\r\n                        viewModel.updateUserProfileImage(\"\", \"\".toByteArray())\r\n                    }\r\n                    true\r\n                }\r\n                else -> true\r\n            }\r\n                R.id.profile ->\r\n                    toast(\"GeekTech\")\r\n                R.id.photo ->\r\n                    getData()\r\n                R.id.delete ->\r\n                    toast(\"Ты Лузер Работай Хорошо, и НЕ Сдавайся\")\r\n            }\r\n            true\r\n        }\r\n        binding.chanceBtn.setOnClickListener {\r\n            findNavController().navigateUp()\r\n        }\r\n        languageСhange()\r\n        hideOrShowPhoneNumber()\r\n    }\r\n\r\n    private fun hideOrShowPhoneNumber() {\r\n        binding.switchNumbers.setOnCheckedChangeListener { _, b ->\r\n            preferences.isHidePhoneNumber = b\r\n        }\r\n    }\r\n\r\n    private fun getData() {\r\n        binding.openBottomSheet.isVisible = false\r\n        binding.coordinatorGallery.isVisible = true\r\n        stateBottomSheet(bottomSheetBehavior, BottomSheetBehavior.STATE_HALF_EXPANDED)\r\n        bottomSheetBehavior?.addBottomSheetCallback(object :\r\n            BottomSheetBehavior.BottomSheetCallback() {\r\n            override fun onStateChanged(bottomSheet: View, newState: Int) {\r\n                if (BottomSheetBehavior.STATE_EXPANDED == newState) {\r\n                    showView(binding.galleryBottomSheet.appbarLayout, getActionBarSize())\r\n                    binding.openBottomSheet.isVisible = false\r\n                } else {\r\n                    binding.openBottomSheet.isVisible = true\r\n                    hideAppBar(binding.galleryBottomSheet.appbarLayout)\r\n                }\r\n            }\r\n\r\n            override fun onSlide(bottomSheet: View, slideOffset: Float) {}\r\n        })\r\n        binding.openBottomSheet.isVisible = true\r\n        binding.coordinatorGallery.isVisible = true\r\n        stateBottomSheet(bottomSheetBehavior, BottomSheetBehavior.STATE_HALF_EXPANDED)\r\n        bottomSheetBehavior?.addBottomSheetCallback(object :\r\n            BottomSheetBehavior.BottomSheetCallback() {\r\n            override fun onStateChanged(bottomSheet: View, newState: Int) {\r\n                if (BottomSheetBehavior.STATE_EXPANDED == newState) {\r\n                    showView(binding.galleryBottomSheet.appbarLayout, getActionBarSize())\r\n                    binding.openBottomSheet.isVisible = false\r\n                } else {\r\n                    binding.openBottomSheet.isVisible = true\r\n                    hideAppBar(binding.galleryBottomSheet.appbarLayout)\r\n                }\r\n            }\r\n            override fun onSlide(bottomSheet: View, slideOffset: Float) {\r\n            }\r\n        })\r\n    }\r\n    private fun languageСhange() {\r\n        binding.tvLanguage.setOnClickListener {\r\n            findNavController().navigate(R.id.action_profileFragment_to_languagesFragment)\r\n        }\r\n    }\r\n\r\n    override fun establishRequest() {\r\n        fetchUser()\r\n    }\r\n\r\n    private fun fetchUser() {\r\n        viewLifecycleOwner.lifecycleScope.launchWhenStarted {\r\n            viewModel.fetchUser(preferences.currentUserPhoneNumber)\r\n        }\r\n    }\r\n\r\n    override fun launchObservers() {\r\n        subscribeToUser()\r\n    }\r\n\r\n    private fun subscribeToUser() {\r\n        viewModel.userState.spectateUiState(success = {\r\n            savedUserStatus = it.lastSeen\r\n            profileAvatar = it.profileImage\r\n            if (args.croppedImage.isNullOrEmpty()) {\r\n                binding.imImageProfile.loadImageWithGlide(it.profileImage)\r\n            }\r\n            binding.tvName.text = it.name\r\n            binding.tvLastSeen.text = it.lastSeen\r\n            it.phoneNumber?.let { phoneNumber ->\r\n                binding.tvNumber.text =\r\n                    StringBuilder(phoneNumber.substring(0, 4)).append(\" \")\r\n                        .append(phoneNumber.substringAfter(\"+996\"))\r\n            }\r\n            name = it.name\r\n            lastName = it.lastName\r\n\r\n        })\r\n    }\r\n\r\n    private fun setupBottomSheet() {\r\n        args.croppedImage?.let {\r\n            val imageBytes = Base64.decode(it, 0)\r\n            val image = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.size)\r\n            val stream = ByteArrayOutputStream()\r\n            image.compress(Bitmap.CompressFormat.PNG, 90, stream)\r\n            lifecycleScope.launch {\r\n                viewModel.updateUserProfileImage(generateRandomId(), stream.toByteArray())\r\n                    ?.let { image ->\r\n                        binding.imImageProfile.loadImageWithGlide(image)\r\n                    }\r\n            }\r\n        }\r\n        bottomSheetBehavior =\r\n            BottomSheetBehavior.from(binding.galleryBottomSheet.galleryBottomSheetDialog)\r\n    }\r\n\r\n    private fun initBottomSheetRecycler() {\r\n        binding.galleryBottomSheet.recyclerviewRating.adapter = adapter\r\n        binding.galleryBottomSheet.recyclerviewRating.addOnScrollListener(object :\r\n            RecyclerView.OnScrollListener() {\r\n            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\r\n                loadPictures()\r\n            }\r\n        })\r\n        loadPictures()\r\n    }\r\n\r\n    private fun loadPictures() {\r\n        galleryViewModel.getImagesFromGallery(context = requireContext(), pageSize = 10) {\r\n            if (it.isNotEmpty()) {\r\n                val mutableAdapterList = adapter.currentList.toMutableList()\r\n                mutableAdapterList.addAll(it)\r\n                adapter.submitList(mutableAdapterList)\r\n                adapter.notifyItemRangeInserted(adapter.currentList.size, it.size)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Deprecated(\"Deprecated in Java\")\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED)\r\n            initBottomSheetRecycler()\r\n    }\r\n\r\n    private fun onSelect(uri: Uri) {\r\n        findNavController().navigate(\r\n            ProfileFragmentDirections.actionProfileFragmentToCropPhotoFragment(\r\n                uri.toString(),\r\n                CropPhotoRequest.PROFILE\r\n            )\r\n        )\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/feature-main/src/main/java/com/geektechkb/feature_main/presentation/ui/fragments/profil/ProfileFragment.kt b/feature-main/src/main/java/com/geektechkb/feature_main/presentation/ui/fragments/profil/ProfileFragment.kt
--- a/feature-main/src/main/java/com/geektechkb/feature_main/presentation/ui/fragments/profil/ProfileFragment.kt	
+++ b/feature-main/src/main/java/com/geektechkb/feature_main/presentation/ui/fragments/profil/ProfileFragment.kt	
@@ -6,6 +6,8 @@
 import android.graphics.BitmapFactory
 import android.net.Uri
 import android.util.Base64
+import android.util.Log
+import android.view.View
 import androidx.core.content.ContextCompat
 import androidx.core.view.isVisible
 import androidx.fragment.app.viewModels
@@ -16,18 +18,21 @@
 import by.kirich1409.viewbindingdelegate.viewBinding
 import com.geektechkb.core.base.BaseFragment
 import com.geektechkb.core.data.local.preferences.UserPreferencesHelper
-import com.geektechkb.core.extensions.*
+import com.geektechkb.core.extensions.generateRandomId
+import com.geektechkb.core.extensions.loadImageWithGlide
+import com.geektechkb.core.extensions.stateBottomSheet
+import com.geektechkb.core.extensions.toast
 import com.geektechkb.feature_main.R
 import com.geektechkb.feature_main.databinding.FragmentProfileBinding
 import com.geektechkb.feature_main.presentation.ui.adapters.GalleryPicturesAdapter
 import com.geektechkb.feature_main.presentation.ui.fragments.gallerydialogbotomsheet.GalleryBottomSheetViewModel
-import com.geektechkb.feature_main.presentation.ui.models.enums.CropPhotoRequest
+import com.geektechkb.feature_main.presentation.ui.models.GalleryPicture
 import com.google.android.material.bottomsheet.BottomSheetBehavior
 import com.google.android.material.card.MaterialCardView
 import dagger.hilt.android.AndroidEntryPoint
 import kotlinx.coroutines.launch
 import java.io.ByteArrayOutputStream
-import java.util.*
+import java.io.File
 import javax.inject.Inject
 
 @AndroidEntryPoint
@@ -38,32 +43,20 @@
     override val viewModel: ProfileViewModel by viewModels()
     private val galleryViewModel: GalleryBottomSheetViewModel by viewModels()
     private val args by navArgs<ProfileFragmentArgs>()
-    private var name: String? = null
-    private var lastName: String? = null
-    private var profileAvatar: String? = null
+    private var username: String? = null
     private var savedUserStatus: String? = null
     private var bottomSheetBehavior: BottomSheetBehavior<MaterialCardView>? = null
-    private val adapter = GalleryPicturesAdapter(this::onSelect)
     private val pictures = ArrayList<GalleryPicture>()
     private val adapter = GalleryPicturesAdapter(this::onSelect, pictures)
 
     override fun assembleViews() {
-        binding.chanceBtn.setOnClickListener {
+        binding.toolbarButton.setOnClickListener {
             findNavController().navigateUp()
         }
     }
 
     @Inject
     lateinit var preferences: UserPreferencesHelper
-
-    override fun assembleViews() {
-        makeSwitchCheckedIfPhoneNumberIsHidden()
-    }
-
-    private fun makeSwitchCheckedIfPhoneNumberIsHidden() {
-        binding.switchHidePhoneNumber.isChecked = preferences.isPhoneNumberHidden == true
-    }
-
     override fun initialize() {
         requestReadStoragePermission()
     }
@@ -81,92 +74,12 @@
     }
 
     override fun setupListeners() {
-        interactWithToolbarMenu()
-        hideBottomSheetOnClick()
-        navigateToNotificationsAndSoundsFragment()
-        navigateToLanguagesFragment()
-        hidePhoneNumberOnSwitchChecked()
         binding.openBottomSheet.setOnClickListener {
-            binding.apply {
-                openGalleryBottomSheet(
-                    galleryBottomSheet.galleryBottomSheetDialog,
-                    bottomSheetBehavior,
-                    galleryBottomSheet.appbarLayout,
-                    coordinatorGallery,
-                    actionOnDialogStateDragging = {
-                        openBottomSheet.isVisible = false
-                    }, actionOnDialogStateExpanded = {
-                        openBottomSheet.isVisible = false
-                    }, actionOnDialogStateHidden = {
-                        openBottomSheet.isVisible = true
-                    }
-                )
-            }
-        }
-        binding.toolbarButton.setOnClickListener {
-            findNavController().navigateUp()
-        }
-    }
-
-    private fun hideBottomSheetOnClick() {
-        binding.galleryBottomSheet.imBack.setOnSingleClickListener {
-            binding.coordinatorGallery.isVisible = false
-            binding.openBottomSheet.isVisible = true
-        }
-    }
-
-    private fun navigateToNotificationsAndSoundsFragment() {
-        binding.vNotifications.setOnSingleClickListener {
-            findNavController().navigateSafely(R.id.action_profileFragment_to_notificationsAndSoundsFragment)
-        }
-    }
-
-    private fun navigateToLanguagesFragment() {
-        binding.vLanguage.setOnSingleClickListener {
-            findNavController().navigateSafely(R.id.action_profileFragment_to_languagesFragment)
-        }
-    }
-
-    private fun hidePhoneNumberOnSwitchChecked() {
-        binding.switchHidePhoneNumber.actionOnCheckedChange {
-            preferences.isPhoneNumberHidden = it
-            viewModel.hideUserPhoneNumber(it)
-        }
-    }
-
-    private fun interactWithToolbarMenu() = with(binding) {
+            getData()
+        }
+        //menu navigation
         binding.menuToolbar.setOnMenuItemClickListener {
             when (it.itemId) {
-                R.id.edit_profile -> {
-                    findNavController().navigateSafely(R.id.action_profileFragment_to_editProfileFragment)
-                    true
-                }
-                R.id.choose_avatar -> {
-                    openGalleryBottomSheet(
-                        galleryBottomSheet.galleryBottomSheetDialog,
-                        bottomSheetBehavior,
-                        galleryBottomSheet.appbarLayout,
-                        coordinatorGallery,
-                        actionOnDialogStateDragging = {
-                            openBottomSheet.isVisible = false
-                        }, actionOnDialogStateExpanded = {
-                            openBottomSheet.isVisible = false
-                        }, actionOnDialogStateHidden = {
-                            openBottomSheet.isVisible = true
-                        }
-                    )
-                    true
-                }
-                R.id.delete_avatar -> {
-                    binding.imImageProfile.setImageDrawable(null)
-                    binding.imImageProfile.drawable.toString()
-                    viewLifecycleOwner.lifecycleScope.launchWhenStarted {
-                        viewModel.updateUserProfileImage("", "".toByteArray())
-                    }
-                    true
-                }
-                else -> true
-            }
                 R.id.profile ->
                     toast("GeekTech")
                 R.id.photo ->
@@ -179,14 +92,7 @@
         binding.chanceBtn.setOnClickListener {
             findNavController().navigateUp()
         }
-        languageСhange()
-        hideOrShowPhoneNumber()
-    }
 
-    private fun hideOrShowPhoneNumber() {
-        binding.switchNumbers.setOnCheckedChangeListener { _, b ->
-            preferences.isHidePhoneNumber = b
-        }
     }
 
     private fun getData() {
@@ -203,34 +109,20 @@
                     binding.openBottomSheet.isVisible = true
                     hideAppBar(binding.galleryBottomSheet.appbarLayout)
                 }
-            }
-
-            override fun onSlide(bottomSheet: View, slideOffset: Float) {}
-        })
-        binding.openBottomSheet.isVisible = true
-        binding.coordinatorGallery.isVisible = true
-        stateBottomSheet(bottomSheetBehavior, BottomSheetBehavior.STATE_HALF_EXPANDED)
-        bottomSheetBehavior?.addBottomSheetCallback(object :
-            BottomSheetBehavior.BottomSheetCallback() {
-            override fun onStateChanged(bottomSheet: View, newState: Int) {
-                if (BottomSheetBehavior.STATE_EXPANDED == newState) {
-                    showView(binding.galleryBottomSheet.appbarLayout, getActionBarSize())
-                    binding.openBottomSheet.isVisible = false
-                } else {
-                    binding.openBottomSheet.isVisible = true
-                    hideAppBar(binding.galleryBottomSheet.appbarLayout)
-                }
-            }
-            override fun onSlide(bottomSheet: View, slideOffset: Float) {
-            }
-        })
+            })
+        }
     }
+
     private fun languageСhange() {
         binding.tvLanguage.setOnClickListener {
             findNavController().navigate(R.id.action_profileFragment_to_languagesFragment)
         }
-    }
+            }
 
+            override fun onSlide(bottomSheet: View, slideOffset: Float) {}
+        })
+    }
+
     override fun establishRequest() {
         fetchUser()
     }
@@ -248,21 +140,15 @@
     private fun subscribeToUser() {
         viewModel.userState.spectateUiState(success = {
             savedUserStatus = it.lastSeen
-            profileAvatar = it.profileImage
+            binding.tvNumber.text = (it.phoneNumber)
             if (args.croppedImage.isNullOrEmpty()) {
                 binding.imImageProfile.loadImageWithGlide(it.profileImage)
             }
             binding.tvName.text = it.name
             binding.tvLastSeen.text = it.lastSeen
-            it.phoneNumber?.let { phoneNumber ->
-                binding.tvNumber.text =
-                    StringBuilder(phoneNumber.substring(0, 4)).append(" ")
-                        .append(phoneNumber.substringAfter("+996"))
-            }
-            name = it.name
-            lastName = it.lastName
-
+            username = it.name
         })
+        Log.e("animee", viewModel.userState.toString())
     }
 
     private fun setupBottomSheet() {
@@ -282,6 +168,26 @@
             BottomSheetBehavior.from(binding.galleryBottomSheet.galleryBottomSheetDialog)
     }
 
+    private fun showView(view: View, size: Int) {
+        val params = view.layoutParams
+        params.height = size
+        binding.galleryBottomSheet.appbarLayout.isVisible = true
+        view.layoutParams = params
+    }
+
+    private fun hideAppBar(view: View) {
+        val params = view.layoutParams
+        params.height = 4
+        binding.galleryBottomSheet.appbarLayout.isVisible = false
+        view.layoutParams = params
+    }
+
+    private fun getActionBarSize(): Int {
+        val array =
+            requireContext().theme.obtainStyledAttributes(intArrayOf(android.R.attr.actionBarSize))
+        return array.getDimension(0, 0f).toInt()
+    }
+
     private fun initBottomSheetRecycler() {
         binding.galleryBottomSheet.recyclerviewRating.adapter = adapter
         binding.galleryBottomSheet.recyclerviewRating.addOnScrollListener(object :
@@ -296,11 +202,10 @@
     private fun loadPictures() {
         galleryViewModel.getImagesFromGallery(context = requireContext(), pageSize = 10) {
             if (it.isNotEmpty()) {
-                val mutableAdapterList = adapter.currentList.toMutableList()
-                mutableAdapterList.addAll(it)
-                adapter.submitList(mutableAdapterList)
-                adapter.notifyItemRangeInserted(adapter.currentList.size, it.size)
+                pictures.addAll(it)
+                adapter.notifyItemRangeInserted(pictures.size, it.size)
             }
+            Log.e("GalleryListSize", "${pictures.size}")
         }
     }
 
@@ -316,10 +221,10 @@
 
     private fun onSelect(uri: Uri) {
         findNavController().navigate(
-            ProfileFragmentDirections.actionProfileFragmentToCropPhotoFragment(
-                uri.toString(),
-                CropPhotoRequest.PROFILE
-            )
+            ProfileFragmentDirections.actionProfileFragmentToCropPhotoFragment(uri.toString())
         )
     }
-}
\ No newline at end of file
+
+
+}
+
Index: core/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.geektechkb.core\">\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/AndroidManifest.xml b/core/src/main/AndroidManifest.xml
--- a/core/src/main/AndroidManifest.xml	
+++ b/core/src/main/AndroidManifest.xml	
@@ -4,4 +4,5 @@
 
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.VIBRATE" />
 </manifest>
\ No newline at end of file
Index: core/src/main/java/com/geektechkb/core/extensions/UIExtensions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.geektechkb.core.extensions\r\n\r\nimport android.graphics.Color\r\nimport android.text.SpannableStringBuilder\r\nimport android.widget.ImageView\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions\r\nimport com.google.android.material.switchmaterial.SwitchMaterial\r\nimport io.getstream.avatarview.AvatarView\r\nimport io.getstream.avatarview.coil.loadImage\r\nimport kotlin.random.Random\r\n\r\nfun ImageView.loadImageWithGlide(url: Any?) = Glide.with(this).load(url).into(this)\r\n\r\n\r\nfun ImageView.setImage(uri: String) = Glide.with(this).load(uri)\r\n    .circleCrop().transition(DrawableTransitionOptions.withCrossFade()).into(this)\r\n\r\nfun ImageView.setImage(uri: String) {\r\n    Glide.with(this)\r\n        .load(uri)\r\n        .circleCrop()\r\n        .transition(DrawableTransitionOptions.withCrossFade())\r\n        .into(this)\r\n}\r\n\r\nfun ImageView.changeIconWhenActivated(vararg imageViews: ImageView) {\r\n    setOnClickListener {\r\n        isActivated = !isActivated\r\n    }\r\n    imageViews.forEach { imageView ->\r\n        imageView.setOnClickListener {\r\n            imageView.isActivated = !imageView.isActivated\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfun SwitchMaterial.actionOnCheckedChange(action: (Boolean) -> Unit) {\r\n    setOnCheckedChangeListener { _, isChecked ->\r\n        action(isChecked)\r\n    }\r\n}\r\n\r\nfun AvatarView.loadImageAndSetInitialsIfFailed(url: String?, name: String?, lastName: String?) {\r\n    loadImage(data = url, onError = { _, _ ->\r\n\r\n        val random = Random\r\n        val randomAvatarBackgroundColor =\r\n            Color.rgb(\r\n                random.nextInt(255),\r\n                random.nextInt(255),\r\n                random.nextInt(255)\r\n            )\r\n        avatarInitialsBackgroundColor = randomAvatarBackgroundColor\r\n        avatarInitials = SpannableStringBuilder(\r\n            name.takeFirstCharacterAndCapitalizeIt()\r\n        ).append(lastName.takeFirstCharacterAndCapitalizeIt()).toString()\r\n    })\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/com/geektechkb/core/extensions/UIExtensions.kt b/core/src/main/java/com/geektechkb/core/extensions/UIExtensions.kt
--- a/core/src/main/java/com/geektechkb/core/extensions/UIExtensions.kt	
+++ b/core/src/main/java/com/geektechkb/core/extensions/UIExtensions.kt	
@@ -12,10 +12,6 @@
 
 fun ImageView.loadImageWithGlide(url: Any?) = Glide.with(this).load(url).into(this)
 
-
-fun ImageView.setImage(uri: String) = Glide.with(this).load(uri)
-    .circleCrop().transition(DrawableTransitionOptions.withCrossFade()).into(this)
-
 fun ImageView.setImage(uri: String) {
     Glide.with(this)
         .load(uri)
Index: feature-auth/src/main/java/com/geektechkb/feature_auth/presentation/ui/fragments/auth/verification/VerifyAuthenticationFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.geektechkb.feature_auth.presentation.ui.fragments.auth.verification\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.CountDownTimer\r\nimport android.view.View\r\nimport android.widget.TextView\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.navigation.fragment.navArgs\r\nimport by.kirich1409.viewbindingdelegate.viewBinding\r\nimport com.geektechkb.core.base.BaseFragment\r\nimport com.geektechkb.core.extensions.*\r\nimport com.geektechkb.feature_auth.R\r\nimport com.geektechkb.feature_auth.databinding.FragmentVerifyAuthenticationBinding\r\nimport com.google.android.material.textfield.TextInputEditText\r\nimport com.google.firebase.auth.PhoneAuthCredential\r\nimport dagger.hilt.android.AndroidEntryPoint\r\n\r\n@AndroidEntryPoint\r\nclass VerifyAuthenticationFragment :\r\n    BaseFragment<FragmentVerifyAuthenticationBinding, VerifyAuthenticationViewModel>(R.layout.fragment_verify_authentication) {\r\n    override val binding by viewBinding(FragmentVerifyAuthenticationBinding::bind)\r\n    override val viewModel by viewModels<VerifyAuthenticationViewModel>()\r\n    private val args: VerifyAuthenticationFragmentArgs by navArgs()\r\n    private var timeInSeconds = 0L\r\n    private var attemptsToVerifyPhoneNumberAvailable = 3\r\n    private var retrievedVerificationCode = \"\"\r\n    private lateinit var countDownTimer: CountDownTimer\r\n\r\n    override fun assembleViews() {\r\n        setPhoneNumberCodeWasSentTo()\r\n        updateCountDownTimer()\r\n        setupCountDownTimer()\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun setPhoneNumberCodeWasSentTo() {\r\n        binding.tvVerificationCodeWasSent.text =\r\n            \"${getString(R.string.verification_code_was_sent_to_the_entered_phone)}${\r\n                args.phoneNumber.substringAfter(\r\n                    \"+\"\r\n                ).chunked(3).joinToString(\" \")\r\n            }\"\r\n    }\r\n\r\n    private fun updateCountDownTimer() {\r\n        val minute = (timeInSeconds / 1000) / 60\r\n        val seconds = (timeInSeconds / 1000) % 60\r\n        if (seconds <= 9) {\r\n            \"Отправить код заново $minute:0$seconds\".also {\r\n                if (view != null)\r\n                    binding.tvCountDownTimer.text = it\r\n            }\r\n        } else {\r\n            \"Отправить код заново $minute:$seconds\".also {\r\n                if (view != null) {\r\n                    binding.tvCountDownTimer.text = it\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setupCountDownTimer() {\r\n        countDownTimer = object : CountDownTimer(120000, 1000) {\r\n            override fun onTick(p0: Long) {\r\n                timeInSeconds = p0\r\n                updateCountDownTimer()\r\n            }\r\n\r\n            override fun onFinish() {\r\n                countDownTimer.cancel()\r\n                if (view != null)\r\n                    binding.tvCountDownTimer.isVisible = false\r\n                if (view != null)\r\n                    binding.tvResendVerificationCode.isVisible = true\r\n            }\r\n        }\r\n        countDownTimer.start()\r\n    }\r\n\r\n    override fun setupListeners() {\r\n        returnBackToTheNumberInput()\r\n        addBackspaceListener()\r\n        moveToTheNextDigit()\r\n        focusOnTheFirstDigit()\r\n        disableEditTextsKeyListener()\r\n        verifyPhoneNumberUsingCode()\r\n        resendVerificationCode()\r\n        enableNumericKeyboardListeners()\r\n    }\r\n\r\n    private fun returnBackToTheNumberInput() {\r\n        binding.ibBack.setOnClickListener {\r\n            findNavController().navigateSafely(R.id.action_verifyAuthenticationFragment_to_signUpFragment)\r\n        }\r\n    }\r\n\r\n    private fun addBackspaceListener() {\r\n        binding.apply {\r\n            ibBackspace.setOnClickListener {\r\n                etFirstDigit.deleteACharacterThenFocusOnThePreviousDigit(\r\n                    etSecondDigit,\r\n                    etThirdDigit,\r\n                    etFourthDigit,\r\n                    etFifthDigit,\r\n                    etSixthDigit,\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun resendVerificationCode() {\r\n        binding.tvResendVerificationCode.setOnClickListener {\r\n            binding.tvCountDownTimer.isVisible = true\r\n            binding.tvResendVerificationCode.isVisible = false\r\n            setupCountDownTimer()\r\n            resendVerificationCode(args.phoneNumber)\r\n    private fun TextInputEditText.deleteACharacterThenFocusOnThePreviousDigit(\r\n        vararg digits: TextInputEditText\r\n    ) {\r\n\r\n        when (rootView.findFocus()) {\r\n            this -> {\r\n                text?.clear()\r\n            }\r\n            digits[0] -> {\r\n                digits[0].text?.clear()\r\n                requestFocus()\r\n            }\r\n            digits[1] -> {\r\n                digits[1].text?.clear()\r\n                digits[0].requestFocus()\r\n            }\r\n            digits[2] -> {\r\n                digits[2].text?.clear()\r\n                digits[1].requestFocus()\r\n            }\r\n            digits[3] -> {\r\n                digits[3].text?.clear()\r\n                digits[2].requestFocus()\r\n            }\r\n            digits[4] -> {\r\n                digits[4].text?.clear()\r\n                digits[3].requestFocus()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun moveToTheNextDigit() {\r\n        binding.apply {\r\n            establishProperFocusingOnTheNextDigit()\r\n        }\r\n    }\r\n\r\n    private fun establishProperFocusingOnTheNextDigit() {\r\n        binding.apply {\r\n            etFirstDigit.requestFocusOnTheNextDigit(etSecondDigit)\r\n            etSecondDigit.requestFocusOnTheNextDigit(etThirdDigit)\r\n            etThirdDigit.requestFocusOnTheNextDigit(etFourthDigit)\r\n            etFourthDigit.requestFocusOnTheNextDigit(etFifthDigit)\r\n            etFifthDigit.requestFocusOnTheNextDigit(etSixthDigit)\r\n        }\r\n    }\r\n\r\n    private fun TextInputEditText.requestFocusOnTheNextDigit(\r\n        editTextToRequestAFocusOn: TextInputEditText\r\n    ) {\r\n        addTextChangedListenerAnonymously(doSomethingOnTextChanged = {\r\n            if (text?.length == 1)\r\n                editTextToRequestAFocusOn.requestFocus()\r\n        })\r\n    }\r\n\r\n    private fun focusOnTheFirstDigit() {\r\n        binding.etFirstDigit.requestFocus()\r\n    }\r\n\r\n    private fun disableEditTextsKeyListener() {\r\n        binding.apply {\r\n            etFirstDigit.disableKeyListeners(\r\n                etSecondDigit,\r\n                etThirdDigit,\r\n                etFourthDigit,\r\n                etFifthDigit,\r\n                etSixthDigit\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun verifyPhoneNumberUsingCode() {\r\n        binding.apply {\r\n            btnContinue.setOnClickListener {\r\n                retrievedVerificationCode = etFirstDigit.retrieveVerificationCode(\r\n                    etSecondDigit,\r\n                    etThirdDigit,\r\n                    etFourthDigit,\r\n                    etFifthDigit,\r\n                    etSixthDigit\r\n                )\r\n                if (retrievedVerificationCode.length == 6 && retrievedVerificationCode.isNotEmpty()) {\r\n\r\n                    viewModel.getVerificationId()?.let {\r\n                        signInWithPhoneAuthCredential(\r\n                            viewModel.verifyPhoneNumberWithCode(\r\n                                it,\r\n                                retrievedVerificationCode.trim()\r\n                            )\r\n                        )\r\n                    }\r\n\r\n                } else {\r\n\r\n                    showLongDurationSnackbar(\"Код подтверждения состоит из 6 цифр. Вы должны заполнить все 6 полей чтобы ввести код подтверждения\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun signInWithPhoneAuthCredential(credential: PhoneAuthCredential) {\r\n        binding.apply {\r\n            viewModel.signInWithPhoneAuthCredential(\r\n                viewModel.firebaseAuth,\r\n                credential,\r\n                requireActivity(),\r\n                userSuccessfullyVerifiedTheirPhoneNumber = {\r\n                    findNavController().directionsSafeNavigation(\r\n                        VerifyAuthenticationFragmentDirections.actionVerifyAuthenticationFragmentToCreateProfileFragment(\r\n                            args.phoneNumber.removeExtraSpaces()\r\n                        )\r\n                    )\r\n                    showShortDurationSnackbar(\"Вы успешно авторизировались!\")\r\n                }, authenticationProcessFailed = {\r\n                    if (attemptsToVerifyPhoneNumberAvailable >= 3)\r\n                        showShortDurationSnackbar(\"Процесс аутентификации провалился. Повторите еще раз!\")\r\n                }, ifUserHasEnteredInvalidCredentials = {\r\n                    when (attemptsToVerifyPhoneNumberAvailable) {\r\n                        0 -> findNavController().navigate(\r\n                            R.id.attemptsToVerifyPhoneNumberExceededDialogFragment\r\n                        )\r\n                        else -> {\r\n                            attemptsToVerifyPhoneNumberAvailable--\r\n                            showLongDurationSnackbar(\r\n                                \"Введенный код подтверждения неверный. У вас осталось $attemptsToVerifyPhoneNumberAvailable попытки!\"\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun resendVerificationCode() {\r\n        binding.tvVerificationCodeWasSent.setOnClickListener {\r\n            binding.tvCountDownTimer.isVisible = true\r\n            binding.tvVerificationCodeWasSent.isVisible = false\r\n            setupCountDownTimer()\r\n            resendVerificationCode(args.phoneNumber)\r\n        }\r\n    }\r\n\r\n    private fun resendVerificationCode(\r\n        phoneNumber: String,\r\n    ) {\r\n        viewModel.resendVerificationCode(\r\n            viewModel.firebaseAuth,\r\n            phoneNumber,\r\n            requireActivity(),\r\n            viewModel.provideCallbacks(\r\n                authenticationSucceeded =\r\n                {\r\n                    showShortDurationSnackbar(\"You have successfully authenticated\")\r\n                },\r\n                authInvalidCredentialsError = {\r\n                    showShortDurationSnackbar(\"The phone number you entered was wrong\")\r\n                },\r\n                tooManyRequestsError = {\r\n                    showShortDurationSnackbar(\r\n\r\n                        \"Looks like you have used all of the requests available\"\r\n                    )\r\n                }), viewModel.getForceResendingToken()\r\n        )\r\n    }\r\n\r\n    private fun enableNumericKeyboardListeners() {\r\n        setupClickingOnOne()\r\n        setupClickingOnTwo()\r\n        setupClickingOnThree()\r\n        setupClickingOnFour()\r\n        setupClickingOnFive()\r\n        setupClickingOnSix()\r\n        setupClickingOnSeven()\r\n        setupClickingOnEight()\r\n        setupClickingOnNine()\r\n        setupClickingOnZero()\r\n    }\r\n\r\n\r\n    private fun setupClickingOnOne() {\r\n        binding.apply {\r\n            tvOne.setOnNumericClickListener(\r\n                view,\r\n                etFirstDigit,\r\n                etSecondDigit,\r\n                etThirdDigit,\r\n                etFourthDigit,\r\n                etFifthDigit,\r\n                etSixthDigit\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun setupClickingOnTwo() {\r\n        binding.apply {\r\n            tvTwo.setOnNumericClickListener(\r\n                view,\r\n                etFirstDigit,\r\n                etSecondDigit,\r\n                etThirdDigit,\r\n                etFourthDigit,\r\n                etFifthDigit,\r\n                etSixthDigit\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun setupClickingOnThree() {\r\n        binding.apply {\r\n            tvThree.setOnNumericClickListener(\r\n                view,\r\n                etFirstDigit,\r\n                etSecondDigit,\r\n                etThirdDigit,\r\n                etFourthDigit,\r\n                etFifthDigit,\r\n                etSixthDigit\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun setupClickingOnFour() {\r\n        binding.apply {\r\n            tvFour.setOnNumericClickListener(\r\n                view,\r\n                etFirstDigit,\r\n                etSecondDigit,\r\n                etThirdDigit,\r\n                etFourthDigit,\r\n                etFifthDigit,\r\n                etSixthDigit\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun setupClickingOnFive() {\r\n        binding.apply {\r\n            tvFive.setOnNumericClickListener(\r\n                view,\r\n                etFirstDigit,\r\n                etSecondDigit,\r\n                etThirdDigit,\r\n                etFourthDigit,\r\n                etFifthDigit,\r\n                etSixthDigit\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun setupClickingOnSix() {\r\n        binding.apply {\r\n            tvSix.setOnNumericClickListener(\r\n                view,\r\n                etFirstDigit,\r\n                etSecondDigit,\r\n                etThirdDigit,\r\n                etFourthDigit,\r\n                etFifthDigit,\r\n                etSixthDigit\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun setupClickingOnSeven() {\r\n        binding.apply {\r\n            tvSeven.setOnNumericClickListener(\r\n                view,\r\n                etFirstDigit,\r\n                etSecondDigit,\r\n                etThirdDigit,\r\n                etFourthDigit,\r\n                etFifthDigit,\r\n                etSixthDigit\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun setupClickingOnEight() {\r\n        binding.apply {\r\n            tvEight.setOnNumericClickListener(\r\n                view,\r\n                etFirstDigit,\r\n                etSecondDigit,\r\n                etThirdDigit,\r\n                etFourthDigit,\r\n                etFifthDigit,\r\n                etSixthDigit\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun setupClickingOnNine() {\r\n        binding.apply {\r\n            tvNine.setOnNumericClickListener(\r\n                view,\r\n                etFirstDigit,\r\n                etSecondDigit,\r\n                etThirdDigit,\r\n                etFourthDigit,\r\n                etFifthDigit,\r\n                etSixthDigit\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun setupClickingOnZero() {\r\n        binding.apply {\r\n            tvZero.setOnNumericClickListener(\r\n                view,\r\n                etFirstDigit,\r\n                etSecondDigit,\r\n                etThirdDigit,\r\n                etFourthDigit,\r\n                etFifthDigit,\r\n                etSixthDigit\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun addBackspaceListener() {\r\n        binding.apply {\r\n            ibBackspace.setOnClickListener {\r\n                etFirstDigit.deleteACharacterThenFocusOnThePreviousDigit(\r\n                    etSecondDigit,\r\n                    etThirdDigit,\r\n                    etFourthDigit,\r\n                    etFifthDigit,\r\n                    etSixthDigit,\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun moveToTheNextDigit() {\r\n        binding.apply {\r\n            establishProperFocusingOnTheNextDigit()\r\n\r\n\r\n        }\r\n    }\r\n\r\n    private fun establishProperFocusingOnTheNextDigit() {\r\n        binding.apply {\r\n            etFirstDigit.requestFocusOnTheNextDigit(etSecondDigit)\r\n            etSecondDigit.requestFocusOnTheNextDigit(etThirdDigit)\r\n            etThirdDigit.requestFocusOnTheNextDigit(etFourthDigit)\r\n            etFourthDigit.requestFocusOnTheNextDigit(etFifthDigit)\r\n            etFifthDigit.requestFocusOnTheNextDigit(etSixthDigit)\r\n        }\r\n    }\r\n\r\n    private fun signInWithPhoneAuthCredential(credential: PhoneAuthCredential) {\r\n        binding.apply {\r\n\r\n\r\n            viewModel.signInWithPhoneAuthCredential(\r\n                viewModel.firebaseAuth,\r\n                credential,\r\n                requireActivity(),\r\n                userSuccessfullyVerifiedTheirPhoneNumber = {\r\n                    findNavController().directionsSafeNavigation(\r\n                        VerifyAuthenticationFragmentDirections.actionVerifyAuthenticationFragmentToCreateProfileFragment(\r\n                            args.phoneNumber.removeExtraSpaces()\r\n                        )\r\n                    )\r\n                    showShortDurationSnackbar(\"Вы успешно авторизировались!\")\r\n                }, authenticationProcessFailed = {\r\n                    if (attemptsToVerifyPhoneNumberAvailable >= 3)\r\n                        showShortDurationSnackbar(\"Процесс аутентификации провалился. Повторите еще раз!\")\r\n                }, ifUserHasEnteredInvalidCredentials = {\r\n                    when (attemptsToVerifyPhoneNumberAvailable) {\r\n                        0 -> findNavController().navigate(\r\n                            R.id.attemptsToVerifyPhoneNumberExceededDialogFragment\r\n                        )\r\n                        else -> {\r\n                            attemptsToVerifyPhoneNumberAvailable--\r\n                            showLongDurationSnackbar(\r\n                                \"Введенный код подтверждения неверный. У вас осталось $attemptsToVerifyPhoneNumberAvailable попытки!\"\r\n                            )\r\n                            clearTextInEditTextsIfAuthenticationFailed(\r\n                                etFirstDigit,\r\n                                etSecondDigit,\r\n                                etThirdDigit,\r\n                                etFourthDigit,\r\n                                etFifthDigit,\r\n                                etSixthDigit\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun resendVerificationCode(\r\n        phoneNumber: String,\r\n    ) {\r\n        viewModel.resendVerificationCode(\r\n            viewModel.firebaseAuth,\r\n            phoneNumber,\r\n            requireActivity(),\r\n            viewModel.provideCallbacks(\r\n                authenticationSucceeded =\r\n                {\r\n                    showShortDurationSnackbar(\"You have successfully authenticated\")\r\n                },\r\n                authInvalidCredentialsError = {\r\n                    showShortDurationSnackbar(\"The phone number you entered was wrong\")\r\n                },\r\n                tooManyRequestsError = {\r\n                    showShortDurationSnackbar(\r\n\r\n                        \"Looks like you have used all of the requests available\"\r\n                    )\r\n                }), viewModel.getForceResendingToken()\r\n        )\r\n    }\r\n\r\n    private fun clearTextInEditTextsIfAuthenticationFailed(vararg digits: TextInputEditText) {\r\n        digits.forEach {\r\n            it.text?.clear()\r\n        }\r\n    }\r\n\r\n\r\n    private fun TextInputEditText.deleteACharacterThenFocusOnThePreviousDigit(\r\n        vararg digits: TextInputEditText\r\n    ) {\r\n\r\n        when (rootView.findFocus()) {\r\n            this -> {\r\n                text?.clear()\r\n            }\r\n            digits[0] -> {\r\n                digits[0].text?.clear()\r\n                requestFocus()\r\n            }\r\n            digits[1] -> {\r\n                digits[1].text?.clear()\r\n                digits[0].requestFocus()\r\n            }\r\n            digits[2] -> {\r\n                digits[2].text?.clear()\r\n                digits[1].requestFocus()\r\n            }\r\n            digits[3] -> {\r\n                digits[3].text?.clear()\r\n                digits[2].requestFocus()\r\n            }\r\n            digits[4] -> {\r\n                digits[4].text?.clear()\r\n                digits[3].requestFocus()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun TextInputEditText.requestFocusOnTheNextDigit(\r\n        editTextToRequestAFocusOn: TextInputEditText\r\n    ) {\r\n        addTextChangedListenerAnonymously(doSomethingOnTextChanged = {\r\n            if (text?.length == 1)\r\n                editTextToRequestAFocusOn.requestFocus()\r\n        })\r\n    }\r\n\r\n    private fun TextView.setOnNumericClickListener(\r\n        view: View?,\r\n        vararg allDigits: TextInputEditText,\r\n    ) {\r\n        setOnClickListener {\r\n            view?.appendTextDependingOnTheFocus(\r\n                allDigits = allDigits,\r\n                text.toString()\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun View.appendTextDependingOnTheFocus(\r\n        vararg allDigits: TextInputEditText,\r\n        textToAppend: CharSequence\r\n    ) {\r\n        when (rootView.findFocus()) {\r\n            allDigits[0] -> allDigits[0].text?.append(textToAppend)\r\n            allDigits[1] -> allDigits[1].text?.append(textToAppend)\r\n            allDigits[2] -> allDigits[2].text?.append(textToAppend)\r\n            allDigits[3] -> allDigits[3].text?.append(textToAppend)\r\n            allDigits[4] -> allDigits[4].text?.append(textToAppend)\r\n            allDigits[5] -> allDigits[5].text?.append(textToAppend)\r\n        }\r\n    }\r\n\r\n    private fun clearTextInEditTextsIfAuthenticationFailed(vararg digits: TextInputEditText) {\r\n        digits.forEach {\r\n            it.text?.clear()\r\n        }\r\n    }\r\n\r\n    private fun TextInputEditText.retrieveVerificationCode(\r\n        vararg digits: TextInputEditText,\r\n    ) =\r\n        text.toString() + digits[0].text + digits[1].text + digits[2].text + digits[3].text + digits[4].text\r\n\r\n    private fun TextInputEditText.disableKeyListeners(\r\n        vararg digits: TextInputEditText\r\n    ) {\r\n        keyListener = null\r\n        digits[0].keyListener = null\r\n        digits[1].keyListener = null\r\n        digits[2].keyListener = null\r\n        digits[3].keyListener = null\r\n        digits[4].keyListener = null\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/feature-auth/src/main/java/com/geektechkb/feature_auth/presentation/ui/fragments/auth/verification/VerifyAuthenticationFragment.kt b/feature-auth/src/main/java/com/geektechkb/feature_auth/presentation/ui/fragments/auth/verification/VerifyAuthenticationFragment.kt
--- a/feature-auth/src/main/java/com/geektechkb/feature_auth/presentation/ui/fragments/auth/verification/VerifyAuthenticationFragment.kt	
+++ b/feature-auth/src/main/java/com/geektechkb/feature_auth/presentation/ui/fragments/auth/verification/VerifyAuthenticationFragment.kt	
@@ -96,57 +96,6 @@
         }
     }
 
-    private fun addBackspaceListener() {
-        binding.apply {
-            ibBackspace.setOnClickListener {
-                etFirstDigit.deleteACharacterThenFocusOnThePreviousDigit(
-                    etSecondDigit,
-                    etThirdDigit,
-                    etFourthDigit,
-                    etFifthDigit,
-                    etSixthDigit,
-                )
-            }
-        }
-    }
-
-    private fun resendVerificationCode() {
-        binding.tvResendVerificationCode.setOnClickListener {
-            binding.tvCountDownTimer.isVisible = true
-            binding.tvResendVerificationCode.isVisible = false
-            setupCountDownTimer()
-            resendVerificationCode(args.phoneNumber)
-    private fun TextInputEditText.deleteACharacterThenFocusOnThePreviousDigit(
-        vararg digits: TextInputEditText
-    ) {
-
-        when (rootView.findFocus()) {
-            this -> {
-                text?.clear()
-            }
-            digits[0] -> {
-                digits[0].text?.clear()
-                requestFocus()
-            }
-            digits[1] -> {
-                digits[1].text?.clear()
-                digits[0].requestFocus()
-            }
-            digits[2] -> {
-                digits[2].text?.clear()
-                digits[1].requestFocus()
-            }
-            digits[3] -> {
-                digits[3].text?.clear()
-                digits[2].requestFocus()
-            }
-            digits[4] -> {
-                digits[4].text?.clear()
-                digits[3].requestFocus()
-            }
-        }
-    }
-
     private fun moveToTheNextDigit() {
         binding.apply {
             establishProperFocusingOnTheNextDigit()
@@ -217,49 +166,16 @@
         }
     }
 
-    private fun signInWithPhoneAuthCredential(credential: PhoneAuthCredential) {
-        binding.apply {
-            viewModel.signInWithPhoneAuthCredential(
-                viewModel.firebaseAuth,
-                credential,
-                requireActivity(),
-                userSuccessfullyVerifiedTheirPhoneNumber = {
-                    findNavController().directionsSafeNavigation(
-                        VerifyAuthenticationFragmentDirections.actionVerifyAuthenticationFragmentToCreateProfileFragment(
-                            args.phoneNumber.removeExtraSpaces()
-                        )
-                    )
-                    showShortDurationSnackbar("Вы успешно авторизировались!")
-                }, authenticationProcessFailed = {
-                    if (attemptsToVerifyPhoneNumberAvailable >= 3)
-                        showShortDurationSnackbar("Процесс аутентификации провалился. Повторите еще раз!")
-                }, ifUserHasEnteredInvalidCredentials = {
-                    when (attemptsToVerifyPhoneNumberAvailable) {
-                        0 -> findNavController().navigate(
-                            R.id.attemptsToVerifyPhoneNumberExceededDialogFragment
-                        )
-                        else -> {
-                            attemptsToVerifyPhoneNumberAvailable--
-                            showLongDurationSnackbar(
-                                "Введенный код подтверждения неверный. У вас осталось $attemptsToVerifyPhoneNumberAvailable попытки!"
-                            )
-                        }
-                    }
-                }
-            )
-        }
-    }
-
     private fun resendVerificationCode() {
         binding.tvVerificationCodeWasSent.setOnClickListener {
             binding.tvCountDownTimer.isVisible = true
             binding.tvVerificationCodeWasSent.isVisible = false
             setupCountDownTimer()
-            resendVerificationCode(args.phoneNumber)
+            resendVerificationCodeAgain(args.phoneNumber)
         }
     }
 
-    private fun resendVerificationCode(
+    private fun resendVerificationCodeAgain(
         phoneNumber: String,
     ) {
         viewModel.resendVerificationCode(
@@ -451,24 +367,6 @@
         }
     }
 
-    private fun moveToTheNextDigit() {
-        binding.apply {
-            establishProperFocusingOnTheNextDigit()
-
-
-        }
-    }
-
-    private fun establishProperFocusingOnTheNextDigit() {
-        binding.apply {
-            etFirstDigit.requestFocusOnTheNextDigit(etSecondDigit)
-            etSecondDigit.requestFocusOnTheNextDigit(etThirdDigit)
-            etThirdDigit.requestFocusOnTheNextDigit(etFourthDigit)
-            etFourthDigit.requestFocusOnTheNextDigit(etFifthDigit)
-            etFifthDigit.requestFocusOnTheNextDigit(etSixthDigit)
-        }
-    }
-
     private fun signInWithPhoneAuthCredential(credential: PhoneAuthCredential) {
         binding.apply {
 
@@ -536,12 +434,6 @@
         )
     }
 
-    private fun clearTextInEditTextsIfAuthenticationFailed(vararg digits: TextInputEditText) {
-        digits.forEach {
-            it.text?.clear()
-        }
-    }
-
 
     private fun TextInputEditText.deleteACharacterThenFocusOnThePreviousDigit(
         vararg digits: TextInputEditText
@@ -574,16 +466,6 @@
         }
     }
 
-
-    private fun TextInputEditText.requestFocusOnTheNextDigit(
-        editTextToRequestAFocusOn: TextInputEditText
-    ) {
-        addTextChangedListenerAnonymously(doSomethingOnTextChanged = {
-            if (text?.length == 1)
-                editTextToRequestAFocusOn.requestFocus()
-        })
-    }
-
     private fun TextView.setOnNumericClickListener(
         view: View?,
         vararg allDigits: TextInputEditText,
Index: app/src/main/java/com/geektechkb/geekmessenger/App.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.geektechkb.geekmessenger\r\n\r\nimport android.app.Application\r\nimport android.util.Log\r\nimport com.geektechkb.common.constants.Constants.UNIQUE_HANDLER_ID\r\nimport com.geektechkb.feature_main.BuildConfig\r\nimport com.google.firebase.messaging.FirebaseMessaging\r\nimport com.sendbird.calls.DirectCall\r\nimport com.sendbird.calls.SendBirdCall\r\nimport com.sendbird.calls.handler.SendBirdCallListener\r\nimport com.vanniktech.emoji.EmojiManager\r\nimport com.vanniktech.emoji.google.GoogleEmojiProvider\r\nimport dagger.hilt.android.HiltAndroidApp\r\n\r\n@HiltAndroidApp\r\nclass App : Application() {\r\n\r\n    val emojiManager = EmojiManager.install(GoogleEmojiProvider())\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        initSendBird()\r\n        installEmojiProvider()\r\n\r\n        FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->\r\n            if (!task.isSuccessful) {\r\n                return@addOnCompleteListener\r\n            }\r\n            val token = task.result\r\n            Log.e(\"RUSS\", \"Token -> $token\")}}}\r\n            Log.e(\"RUSS\", \"Token -> $token\")\r\n        }\r\n        SendBirdCall.addListener(UNIQUE_HANDLER_ID, object : SendBirdCallListener() {\r\n            override fun onRinging(call: DirectCall) {\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    private fun installEmojiProvider() {\r\n        EmojiManager.install(GoogleEmojiProvider())\r\n    }\r\n\r\n    private fun initSendBird() {\r\n        SendBirdCall.init(\r\n            applicationContext,\r\n            BuildConfig.SENDBIRD_APP_ID\r\n        )\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/geektechkb/geekmessenger/App.kt b/app/src/main/java/com/geektechkb/geekmessenger/App.kt
--- a/app/src/main/java/com/geektechkb/geekmessenger/App.kt	
+++ b/app/src/main/java/com/geektechkb/geekmessenger/App.kt	
@@ -3,7 +3,7 @@
 import android.app.Application
 import android.util.Log
 import com.geektechkb.common.constants.Constants.UNIQUE_HANDLER_ID
-import com.geektechkb.feature_main.BuildConfig
+import com.geektechkb.feature_main.BuildConfig.SENDBIRD_APP_ID
 import com.google.firebase.messaging.FirebaseMessaging
 import com.sendbird.calls.DirectCall
 import com.sendbird.calls.SendBirdCall
@@ -27,7 +27,6 @@
                 return@addOnCompleteListener
             }
             val token = task.result
-            Log.e("RUSS", "Token -> $token")}}}
             Log.e("RUSS", "Token -> $token")
         }
         SendBirdCall.addListener(UNIQUE_HANDLER_ID, object : SendBirdCallListener() {
Index: feature-main/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">NavDraw</string>\r\n\r\n    <string name=\"nav_header_desc\">Navigation header</string>\r\n    <string name=\"menu_group\">Создать группу</string>\r\n    <string name=\"menu_calls\">Звонки</string>\r\n    <string name=\"menu_settings\">Настройки</string>\r\n    <string name=\"menu_profile\">Профиль</string>\r\n    <string name=\"back_russian\">Назад</string>\r\n    <string name=\"mute_russian\">Выключить звук</string>\r\n    <string name=\"clear_chat_russian\">Очистить чат</string>\r\n    <string name=\"video_call_russian\">Видеозвонок</string>\r\n    <string name=\"make_call\">Make call</string>\r\n    <string name=\"last_seen_recently_russian\">был(а) недавно</string>\r\n    <string name=\"image_for_user_s_profile_image\">image for user\\'s profile image</string>\r\n    <string name=\"amir_ex_loved_one\">Saida</string>\r\n    <string name=\"there_is_nothing_yet_russian\">Здесь пока ничего нет...</string>\r\n    <string name=\"send_message_or_record_voice_message_russian\">Отправьте сообщение или \\n запишите голосовое \\n сообщение.</string>\r\n    <string name=\"message_russian\">Сообщение</string>\r\n    <string name=\"button_for_emoji\">button for emoji</string>\r\n    <string name=\"image_view_to_launch_camera\">image view to launch camera</string>\r\n    <string name=\"image_view_for_recording_voice_messages\">image view for recording voice messages</string>\r\n    <string name=\"typing\">печатает...</string>\r\n    <string name=\"Gallery\">Галерея</string>\r\n    <string name=\"account\">Аккаунт</string>\r\n    <string name=\"number\">0702345805</string>\r\n    <string name=\"chance_number\">Нажмите чтобы изменить номер телефона</string>\r\n    <string name=\"settings\">Настройки</string>\r\n    <string name=\"tv_notifications\">Уведомление и звуки</string>\r\n    <string name=\"tv_crossed\">Скрыть номер телефона</string>\r\n    <string name=\"tv_language\">Язык</string>\r\n    <string name=\"gallery\">Галерея</string>\r\n    <string name=\"button_to_send_message\">button to send message</string>\r\n    <string name=\"speaker\">Динамик</string>\r\n    <!-- TODO: Remove or change this placeholder text -->\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n    <string name=\"groups\">Группы</string>\r\n    <string name=\"notifications_and_sound\">Уведомления и звуки</string>\r\n    <string name=\"chat_notifications\">Уведомления из чатов</string>\r\n    <string name=\"private_chats\">Личные чаты</string>\r\n    <string name=\"edit_profile\">Редактировать профиль</string>\r\n    <string name=\"hyphensIfPhoneNumberIsHidden\">--- --- --- ---</string>\r\n    <!-- TODO: Remove or change this placeholder text -->\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n</resources>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/feature-main/src/main/res/values/strings.xml b/feature-main/src/main/res/values/strings.xml
--- a/feature-main/src/main/res/values/strings.xml	
+++ b/feature-main/src/main/res/values/strings.xml	
@@ -41,5 +41,4 @@
     <string name="edit_profile">Редактировать профиль</string>
     <string name="hyphensIfPhoneNumberIsHidden">--- --- --- ---</string>
     <!-- TODO: Remove or change this placeholder text -->
-    <string name="hello_blank_fragment">Hello blank fragment</string>
 </resources>
Index: feature-main/src/main/java/com/geektechkb/feature_main/data/repositories/AudioCallRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.geektechkb.feature_main.data.repositories\r\n\r\nimport android.util.Log\r\nimport com.geektechkb.common.constants.Constants.UNIQUE_HANDLER_ID\r\nimport com.geektechkb.core.base.BaseRepository\r\nimport com.geektechkb.core.extensions.generateRandomId\r\nimport com.geektechkb.feature_main.domain.repositories.AudioCallRepository\r\nimport com.sendbird.calls.*\r\nimport com.sendbird.calls.handler.DirectCallListener\r\nimport com.sendbird.calls.handler.SendBirdCallListener\r\nimport java.util.*\r\nimport javax.inject.Inject\r\n\r\nclass AudioCallRepositoryImpl @Inject constructor() : BaseRepository(), AudioCallRepository {\r\n\r\n    private fun authenticateAUserToVoiceCall(callerId: String) {\r\n        val callerParams = AuthenticateParams(callerId)\r\n        SendBirdCall.authenticate(\r\n            callerParams\r\n        ) { user, e ->\r\n            if (e == null) {\r\n                Log.e(\"gaypopSuccess\", \"${user?.userId} has authenticated successfully\")\r\n                registerPushToken()\r\n            } else {\r\n                Log.e(\"gaypopFuckingError\", e.message.toString())\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private fun registerPushToken() {\r\n        SendBirdCall.registerPushToken(\r\n            generateRandomId(), true\r\n        ) { e ->\r\n            if (e == null)\r\n                Log.e(\"gaypop\", \"PushToken has been created successfully\")\r\n            else\r\n                Log.e(\"gaypopError\", e.message.toString())\r\n        }\r\n    }\r\n\r\n    override fun addAudioCallEventHandler(event: (() -> Unit)?) {\r\n        var callId: String? = \"\"\r\n        SendBirdCall.addListener(UUID.randomUUID().toString(), object : SendBirdCallListener() {\r\n            override fun onRinging(call: DirectCall) {\r\n                event?.invoke()\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun makeAVoiceCall(\r\n        callerId: String, calleeId: String, actionOnCallCreatedSuccessfully: (() -> Unit)?,\r\n        actionOnCallConnected: (() -> Unit)?,\r\n        actionOnCallEnded: (() -> Unit)?\r\n    ) {\r\n        authenticateAUserToVoiceCall(callerId)\r\n\r\n\r\n        val dialParams = DialParams(calleeId)\r\n        val callOptions = CallOptions().setFrontCameraAsDefault(true).setAudioEnabled(true)\r\n        dialParams.setCallOptions(callOptions)\r\n        val call: DirectCall? = SendBirdCall.dial(\r\n            dialParams\r\n        ) { call, e ->\r\n            if (e == null) {\r\n                actionOnCallCreatedSuccessfully?.invoke()\r\n                call?.accept(AcceptParams().setCallOptions(callOptions))\r\n\r\n            } else {\r\n                Log.e(\"gaypopError3\", e.message.toString())\r\n            }\r\n\r\n        }\r\n        call?.setListener(object : DirectCallListener() {\r\n            override fun onConnected(call: DirectCall) {\r\n                actionOnCallConnected?.invoke()\r\n            }\r\n\r\n            override fun onEnded(call: DirectCall) {\r\n                actionOnCallEnded?.invoke()\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    override fun acceptAnIncomingCall() {\r\n        SendBirdCall.addListener(UNIQUE_HANDLER_ID, object : SendBirdCallListener() {\r\n            override fun onRinging(call: DirectCall) {\r\n                call.setListener(object : DirectCallListener() {\r\n                    override fun onConnected(call: DirectCall) {\r\n                    }\r\n\r\n                    override fun onEnded(call: DirectCall) {\r\n                    }\r\n\r\n                })\r\n                call.accept(AcceptParams())\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/feature-main/src/main/java/com/geektechkb/feature_main/data/repositories/AudioCallRepositoryImpl.kt b/feature-main/src/main/java/com/geektechkb/feature_main/data/repositories/AudioCallRepositoryImpl.kt
--- a/feature-main/src/main/java/com/geektechkb/feature_main/data/repositories/AudioCallRepositoryImpl.kt	
+++ b/feature-main/src/main/java/com/geektechkb/feature_main/data/repositories/AudioCallRepositoryImpl.kt	
@@ -24,11 +24,7 @@
             } else {
                 Log.e("gaypopFuckingError", e.message.toString())
             }
-
-
         }
-
-
     }
 
     private fun registerPushToken() {
Index: core/src/main/java/com/geektechkb/core/ui/customViews/Extensions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.geektechkb.core.ui.customViews\r\n\r\nimport android.animation.Animator\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.os.CombinedVibration\r\nimport android.os.VibrationEffect\r\nimport android.os.VibratorManager\r\nimport android.view.Gravity\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.core.view.ViewPropertyAnimatorListener\r\nimport java.util.*\r\n\r\nfun Context.dip(value: Float): Float = (value * resources.displayMetrics.density)\r\n\r\nfun Context.dipInt(value: Float): Int = dip(value).toInt()\r\n\r\nfun Context.toast(text: CharSequence, duration: Int = Toast.LENGTH_SHORT): Toast {\r\n    return Toast.makeText(this, text, duration).apply {\r\n        setGravity(Gravity.CENTER, 0, 0)\r\n        show()\r\n    }\r\n}\r\n\r\nfun Context.vibrate(pattern: LongArray) {\r\n    if (Build.VERSION.SDK_INT >= 26) {\r\n        (getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager).vibrate(\r\n            CombinedVibration.createParallel(VibrationEffect.createWaveform(pattern, -1))\r\n        )\r\n    } else {\r\n        (getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager).vibrate(\r\n            CombinedVibration.createParallel(VibrationEffect.createWaveform(pattern, -1))\r\n        )\r\n\r\n    }\r\n}\r\n\r\nfun Long.formatMillis(): String {\r\n    val formatBuilder = StringBuilder()\r\n    val formatter = Formatter(formatBuilder, Locale.getDefault())\r\n    getStringForTime(formatBuilder, formatter, this)\r\n    return formatBuilder.toString()\r\n}\r\n\r\n\r\nfun getStringForTime(builder: StringBuilder, formatter: Formatter, timeMs: Long): String {\r\n    val totalSeconds = (timeMs + 500) / 1000\r\n    val seconds = totalSeconds % 60\r\n    val minutes = totalSeconds / 60 % 60\r\n    val hours = totalSeconds / 3600\r\n    builder.setLength(0)\r\n    return if (hours > 0)\r\n        formatter.format(\"%d:%02d:%02d\", hours, minutes, seconds).toString()\r\n    else\r\n        formatter.format(\"%02d:%02d\", minutes, seconds).toString()\r\n}\r\n\r\n\r\nfun Animator.doOnEnd(action: (animator: Animator) -> Unit) = addListener(onEnd = action)\r\n\r\n\r\nfun Animator.addListener(\r\n    onEnd: ((animator: Animator) -> Unit)? = null,\r\n    onStart: ((animator: Animator) -> Unit)? = null,\r\n    onCancel: ((animator: Animator) -> Unit)? = null,\r\n    onRepeat: ((animator: Animator) -> Unit)? = null\r\n): Animator.AnimatorListener {\r\n    val listener = object : Animator.AnimatorListener {\r\n        override fun onAnimationRepeat(animator: Animator) {\r\n            onRepeat?.invoke(animator)\r\n        }\r\n\r\n        override fun onAnimationEnd(animator: Animator) {\r\n            onEnd?.invoke(animator)\r\n        }\r\n\r\n        override fun onAnimationCancel(animator: Animator) {\r\n            onCancel?.invoke(animator)\r\n        }\r\n\r\n        override fun onAnimationStart(animator: Animator) {\r\n            onStart?.invoke(animator)\r\n        }\r\n    }\r\n    addListener(listener)\r\n    return listener\r\n}\r\n\r\nfun View.fadeIn(duration: Long) {\r\n    this.visibility = View.VISIBLE\r\n    this.alpha = 0f\r\n    ViewCompat.animate(this).alpha(1f).setDuration(duration)\r\n        .setListener(object : ViewPropertyAnimatorListener {\r\n            override fun onAnimationStart(view: View) {\r\n            }\r\n\r\n            override fun onAnimationEnd(view: View) {\r\n            }\r\n\r\n            override fun onAnimationCancel(view: View) {}\r\n        }).start()\r\n}\r\n\r\nfun View.fadeOut(duration: Long, delay: Long = 0) {\r\n    this.alpha = 1f\r\n    ViewCompat.animate(this).alpha(0f).setStartDelay(delay).setDuration(duration)\r\n        .setListener(object : ViewPropertyAnimatorListener {\r\n            override fun onAnimationStart(view: View) {\r\n                view.isDrawingCacheEnabled = true\r\n            }\r\n\r\n            override fun onAnimationEnd(view: View) {\r\n                view.visibility = View.INVISIBLE\r\n                view.alpha = 0f\r\n                @Suppress(\"DEPRECATION\")\r\n                view.isDrawingCacheEnabled = false\r\n            }\r\n\r\n            override fun onAnimationCancel(view: View) {}\r\n        })\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/com/geektechkb/core/ui/customViews/Extensions.kt b/core/src/main/java/com/geektechkb/core/ui/customViews/Extensions.kt
--- a/core/src/main/java/com/geektechkb/core/ui/customViews/Extensions.kt	
+++ b/core/src/main/java/com/geektechkb/core/ui/customViews/Extensions.kt	
@@ -9,6 +9,7 @@
 import android.view.Gravity
 import android.view.View
 import android.widget.Toast
+import androidx.annotation.RequiresApi
 import androidx.core.view.ViewCompat
 import androidx.core.view.ViewPropertyAnimatorListener
 import java.util.*
@@ -24,6 +25,7 @@
     }
 }
 
+@RequiresApi(Build.VERSION_CODES.S)
 fun Context.vibrate(pattern: LongArray) {
     if (Build.VERSION.SDK_INT >= 26) {
         (getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager).vibrate(
Index: feature-main/src/main/java/com/geektechkb/feature_main/data/remote/services/MessengerNotificationsService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.geektechkb.feature_main.data.remote.services\r\n\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.app.NotificationManager.IMPORTANCE_HIGH\r\nimport android.app.PendingIntent\r\nimport android.app.PendingIntent.FLAG_ONE_SHOT\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.graphics.Color\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.core.app.NotificationCompat\r\nimport com.geektechkb.feature_main.R\r\nimport com.geektechkb.feature_main.presentation.ui.fragments.home.HomeFragment\r\nimport com.google.android.gms.tasks.OnCompleteListener\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.firebase.messaging.FirebaseMessagingService\r\nimport com.google.firebase.messaging.RemoteMessage\r\nimport com.google.firebase.messaging.ktx.messaging\r\nimport kotlin.random.Random\r\n\r\nclass MessengerNotificationsService : FirebaseMessagingService() {\r\n\r\n    val CHANNWL_ID = \"my_notification_channel\"\r\n\r\n    override fun onNewToken(tokenUser: String) {\r\n        super.onNewToken(tokenUser)\r\n        token = tokenUser\r\n    }\r\n\r\n//        sendBroadcast(intent)\r\n\r\n    //    }\r\n    override fun onMessageReceived(message: RemoteMessage) {\r\n        super.onMessageReceived(message)\r\n        val intent = Intent(this, HomeFragment::class.java)\r\n        val notificationManager =\r\n            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n        val notificationId = Random.nextInt()\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            createNotificationChannel(notificationManager)\r\n        }\r\n\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\r\n        val pendingIntent = PendingIntent.getActivity(this, 0, intent, FLAG_ONE_SHOT)\r\n        val notification = NotificationCompat.Builder(this, CHANNWL_ID)\r\n            .setContentTitle(message.data[\"title\"])\r\n            .setContentText(message.data[\"message\"])\r\n            .setSmallIcon(R.drawable.arrow)\r\n            .setAutoCancel(true)\r\n            .setContentIntent(pendingIntent)\r\n            .build()\r\n        notificationManager.notify(notificationId, notification)\r\n\r\n//        val intentww = Intent(INTENT_FILTER)\r\n//        message.data.forEach { (key, value) ->\r\n//            intent.putExtra(key, value)\r\n//\r\n//\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun createNotificationChannel(notificationManager: NotificationManager) {\r\n        val channelName = \"ChannelFirebaseChat\"\r\n        val channel = NotificationChannel(CHANNWL_ID, channelName, IMPORTANCE_HIGH).apply {\r\n            description = \"My FIREBASE CHAT DESCRIPTION\"\r\n            enableLights(true)\r\n            lightColor = Color.WHITE\r\n        }\r\n        notificationManager.createNotificationChannel(channel)\r\n    }\r\n\r\n    companion object {\r\n        var sharePref: SharedPreferences? = null\r\n        var token: String?\r\n            get() {\r\n                return sharePref?.getString(\"token\", \"\")\r\n            }\r\n            set(value) {\r\n                sharePref?.edit()?.putString(\"token\", value)?.apply()\r\n            }\r\n\r\n        fun subscribeToTopic(vararg topics: String) {\r\n            for (topic in topics)\r\n                Firebase.messaging.subscribeToTopic(topic).addOnCompleteListener(\r\n                    OnCompleteListener { task ->\r\n                        if (!task.isSuccessful)\r\n                            return@OnCompleteListener\r\n                        Log.d(\"Push\", task.isSuccessful.toString())\r\n                    })\r\n\r\n        }\r\n\r\n        fun unsubscribeFromTopic(vararg topics: String) {\r\n            for (topic in topics)\r\n                Firebase.messaging.unsubscribeFromTopic(topic)\r\n                    .addOnCompleteListener(OnCompleteListener { task ->\r\n                        if (!task.isSuccessful)\r\n                            return@OnCompleteListener\r\n                        Log.d(\"Push\", task.isSuccessful.toString())\r\n                    })\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/feature-main/src/main/java/com/geektechkb/feature_main/data/remote/services/MessengerNotificationsService.kt b/feature-main/src/main/java/com/geektechkb/feature_main/data/remote/services/MessengerNotificationsService.kt
--- a/feature-main/src/main/java/com/geektechkb/feature_main/data/remote/services/MessengerNotificationsService.kt	
+++ b/feature-main/src/main/java/com/geektechkb/feature_main/data/remote/services/MessengerNotificationsService.kt	
@@ -13,6 +13,8 @@
 import android.util.Log
 import androidx.annotation.RequiresApi
 import androidx.core.app.NotificationCompat
+import androidx.core.content.ContextCompat.getSystemService
+import com.geektechkb.common.constants.Constants.INTENT_FILTER
 import com.geektechkb.feature_main.R
 import com.geektechkb.feature_main.presentation.ui.fragments.home.HomeFragment
 import com.google.android.gms.tasks.OnCompleteListener
@@ -33,7 +35,6 @@
 
 //        sendBroadcast(intent)
 
-    //    }
     override fun onMessageReceived(message: RemoteMessage) {
         super.onMessageReceived(message)
         val intent = Intent(this, HomeFragment::class.java)
@@ -58,8 +59,7 @@
 //        val intentww = Intent(INTENT_FILTER)
 //        message.data.forEach { (key, value) ->
 //            intent.putExtra(key, value)
-//
-//
+
     }
 
     @RequiresApi(Build.VERSION_CODES.O)
