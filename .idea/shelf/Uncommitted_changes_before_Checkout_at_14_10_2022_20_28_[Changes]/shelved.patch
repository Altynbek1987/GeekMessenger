Index: local.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>## This file must *NOT* be checked into Version Control Systems,\r\n# as it contains information specific to your local configuration.\r\n#\r\n# Location of the SDK. This is only used by Gradle.\r\n# For customization when using a Version Control System, please read the\r\n# header note.\r\n#Sat Oct 01 10:47:25 ALMT 2022\r\nsdk.dir=/Users/timplifier/Library/Android/sdk
===================================================================
diff --git a/local.properties b/local.properties
--- a/local.properties	
+++ b/local.properties	
@@ -5,4 +5,4 @@
 # For customization when using a Version Control System, please read the
 # header note.
 #Sat Oct 01 10:47:25 ALMT 2022
-sdk.dir=/Users/timplifier/Library/Android/sdk
\ No newline at end of file
+sdk.dir=C\:\\Users\\User\\AppData\\Local\\Android\\Sdk
\ No newline at end of file
Index: feature-main/src/main/java/com/geektechkb/feature_main/presentation/ui/fragments/profil/profile/ProfileFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.geektechkb.feature_main.presentation.ui.fragments.profil.profile\r\n\r\nimport android.Manifest\r\nimport android.app.Dialog\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.net.Uri\r\nimport android.util.Log\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.lifecycle.Lifecycle\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.lifecycle.repeatOnLifecycle\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.navigation.fragment.navArgs\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport by.kirich1409.viewbindingdelegate.viewBinding\r\nimport com.geektechkb.core.base.BaseFragment\r\nimport com.geektechkb.core.data.local.preferences.UserPreferencesHelper\r\nimport com.geektechkb.core.extensions.*\r\nimport com.geektechkb.feature_main.R\r\nimport com.geektechkb.feature_main.databinding.FragmentProfileBinding\r\nimport com.geektechkb.feature_main.presentation.ui.adapters.GalleryPicturesAdapter\r\nimport com.geektechkb.feature_main.presentation.ui.fragments.gallerydialogbotomsheet.GalleryBottomSheetViewModel\r\nimport com.geektechkb.feature_main.presentation.ui.models.enums.CropPhotoRequest\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\r\nimport com.google.android.material.card.MaterialCardView\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport io.getstream.avatarview.coil.loadImage\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\n@AndroidEntryPoint\r\nclass ProfileFragment :\r\n    BaseFragment<FragmentProfileBinding, ProfileViewModel>(R.layout.fragment_profile) {\r\n\r\n    override val binding by viewBinding(FragmentProfileBinding::bind)\r\n    override val viewModel: ProfileViewModel by viewModels()\r\n    private val galleryViewModel: GalleryBottomSheetViewModel by viewModels()\r\n    private val args by navArgs<ProfileFragmentArgs>()\r\n    private var bottomSheetBehavior: BottomSheetBehavior<MaterialCardView>? = null\r\n    private val adapter = GalleryPicturesAdapter(this::onSelect)\r\n    private var dialog: Dialog? = null\r\n\r\n    private val readExternalStoragePermissionLauncher =\r\n        createRequestPermissionLauncherToRequestSinglePermission(\r\n            Manifest.permission.READ_EXTERNAL_STORAGE, actionWhenPermissionHasBeenGranted = {\r\n                initBottomSheetRecycler()\r\n                openGalleryBottomSheet()\r\n            },\r\n            actionWhenPermissionHasBeenDenied = {\r\n                if (findNavController().currentDestination?.id != R.id.deniedPermissionsDialogFragment)\r\n                    findNavController().navigateSafely(\r\n                        R.id.deniedPermissionsDialogFragment\r\n                    )\r\n            })\r\n\r\n    @Inject\r\n    lateinit var preferences: UserPreferencesHelper\r\n\r\n    override fun assembleViews() {\r\n        makeSwitchCheckedIfPhoneNumberIsHidden()\r\n        uploadCroppedImageToFirestoreAndLoadImage()\r\n    }\r\n\r\n    private fun uploadCroppedImageToFirestoreAndLoadImage() {\r\n        args.croppedImage?.let {\r\n            viewLifecycleOwner.lifecycleScope.launch {\r\n                repeatOnLifecycle(Lifecycle.State.STARTED) {\r\n                    showProgressDialog(R.layout.dialog_progressbar)\r\n                    viewModel.updateUserProfileImage(it).also {\r\n                        viewModel.updateUserProfileImageInFireStore(it)\r\n                        dialog?.dismiss()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun makeSwitchCheckedIfPhoneNumberIsHidden() {\r\n        binding.switchHidePhoneNumber.isChecked = preferences.isPhoneNumberHidden == true\r\n    }\r\n\r\n    override fun setupListeners() {\r\n        interactWithToolbarMenu()\r\n        hideBottomSheetOnClick()\r\n        requestPermissionAndOpenBottomSheet()\r\n        navigateToNotificationsAndSoundsFragment()\r\n        navigateToLanguagesFragment()\r\n        hidePhoneNumberOnSwitchChecked()\r\n        backToHomeFragment()\r\n    }\r\n\r\n    private fun interactWithToolbarMenu() {\r\n        binding.menuToolbar.setOnMenuItemClickListener {\r\n            when (it.itemId) {\r\n                R.id.edit_profile -> {\r\n                    findNavController().navigateSafely(R.id.action_profileFragment_to_editProfileFragment)\r\n                    true\r\n                }\r\n                R.id.choose_avatar -> {\r\n                    checkForPermissionStatusAndRequestIt(\r\n                        readExternalStoragePermissionLauncher,\r\n                        Manifest.permission.READ_EXTERNAL_STORAGE,\r\n                        actionWhenPermissionHasBeenGranted = {\r\n                            binding.apply {\r\n                                initBottomSheetRecycler()\r\n                                openGalleryBottomSheet()\r\n                            }\r\n                        })\r\n                    true\r\n                }\r\n                R.id.delete_avatar -> {\r\n                    binding.avProfileImage.setImageDrawable(null)\r\n                    viewLifecycleOwner.lifecycleScope.launchWhenStarted {\r\n                        viewModel.updateUserProfileImage(\"\")\r\n                    }\r\n                    true\r\n                }\r\n                else -> true\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun requestPermissionAndOpenBottomSheet() {\r\n        binding.openBottomSheet.setOnClickListener {\r\n            checkForPermissionStatusAndRequestIt(\r\n                readExternalStoragePermissionLauncher,\r\n                Manifest.permission.READ_EXTERNAL_STORAGE,\r\n                actionWhenPermissionHasBeenGranted = {\r\n                    binding.apply {\r\n                        initBottomSheetRecycler()\r\n                        openGalleryBottomSheet()\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    private fun hideBottomSheetOnClick() {\r\n        binding.galleryBottomSheet.imBack.setOnSingleClickListener {\r\n            binding.coordinatorGallery.isVisible = false\r\n            binding.openBottomSheet.isVisible = true\r\n        }\r\n    }\r\n\r\n    private fun navigateToNotificationsAndSoundsFragment() {\r\n        binding.vNotifications.setOnSingleClickListener {\r\n            findNavController().navigateSafely(R.id.action_profileFragment_to_notificationsAndSoundsFragment)\r\n        }\r\n    }\r\n\r\n    private fun navigateToLanguagesFragment() {\r\n        binding.vLanguage.setOnSingleClickListener {\r\n            findNavController().navigateSafely(R.id.action_profileFragment_to_languagesFragment)\r\n        }\r\n    }\r\n\r\n    private fun hidePhoneNumberOnSwitchChecked() {\r\n        binding.switchHidePhoneNumber.actionOnCheckedChange {\r\n            preferences.isPhoneNumberHidden = it\r\n            viewModel.hideUserPhoneNumber(it)\r\n        }\r\n    }\r\n\r\n    private fun backToHomeFragment() {\r\n        binding.menuToolbar.setNavigationOnClickListener {\r\n            findNavController().navigateSafely(R.id.action_profileFragment_to_mainFlowFragment)\r\n        }\r\n        overrideOnBackPressed {\r\n            findNavController().navigateSafely(R.id.action_profileFragment_to_mainFlowFragment)\r\n        }\r\n    }\r\n\r\n    override fun establishRequest() {\r\n        fetchUser()\r\n    }\r\n\r\n    private fun fetchUser() {\r\n        viewModel.fetchUser(preferences.currentUserPhoneNumber)\r\n    }\r\n\r\n    override fun launchObservers() {\r\n        subscribeToUser()\r\n    }\r\n\r\n    private fun subscribeToUser() {\r\n        binding.apply {\r\n            viewModel.userState.spectateUiState(success = { user ->\r\n                user.apply {\r\n                    args.croppedImage?.let {\r\n                        avProfileImage.loadImage(it)\r\n                    } ?: avProfileImage.loadImageAndSetInitialsIfFailed(\r\n                        profileImage,\r\n                        name,\r\n                        cpiProfileImage,\r\n                        Color.rgb(83, 147, 208)\r\n                    )\r\n                    tvName.text = name\r\n                    tvLastSeen.text = lastSeen\r\n                    tvNumber.text = getString(\r\n                        R.string.plus, phoneNumber?.substringAfter(\r\n                            \"+\"\r\n                        )?.chunked(3)?.joinToString(\" \")\r\n                    )\r\n                }\r\n            }, error = {\r\n                Log.e(\"gaypopError\", it)\r\n            }, gatherIfSucceed = {\r\n                if (args.croppedImage == null)\r\n                    cpiProfileImage.bindToUIStateLoading(it)\r\n            })\r\n        }\r\n    }\r\n\r\n    private fun openGalleryBottomSheet() {\r\n        binding.apply {\r\n            openGalleryBottomSheet(\r\n                galleryBottomSheet.galleryBottomSheetDialog,\r\n                bottomSheetBehavior,\r\n                galleryBottomSheet.appbarLayout,\r\n                coordinatorGallery,\r\n                actionOnDialogStateDragging = {\r\n                    openBottomSheet.isVisible = false\r\n                }, actionOnDialogStateExpanded = {\r\n                    openBottomSheet.isVisible = false\r\n                }, actionOnDialogStateHidden = {\r\n                    openBottomSheet.isVisible = true\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun initBottomSheetRecycler() {\r\n        bottomSheetBehavior =\r\n            BottomSheetBehavior.from(binding.galleryBottomSheet.galleryBottomSheetDialog)\r\n        binding.galleryBottomSheet.recyclerviewRating.adapter = adapter\r\n        binding.galleryBottomSheet.recyclerviewRating.addOnScrollListener(object :\r\n            RecyclerView.OnScrollListener() {\r\n            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\r\n                loadPictures()\r\n            }\r\n        })\r\n        loadPictures()\r\n    }\r\n\r\n    private fun loadPictures() {\r\n        galleryViewModel.getImagesFromGallery(context = requireContext(), pageSize = 10) {\r\n            if (it.isNotEmpty()) {\r\n                val mutableAdapterList = adapter.currentList.toMutableList()\r\n                mutableAdapterList.addAll(it)\r\n                adapter.submitList(mutableAdapterList)\r\n                adapter.notifyItemRangeInserted(adapter.currentList.size, it.size)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun onSelect(uri: Uri) {\r\n        findNavController().navigate(\r\n            ProfileFragmentDirections.actionProfileFragmentToCropPhotoFragment(\r\n                uri.toString(),\r\n                CropPhotoRequest.PROFILE\r\n            )\r\n        )\r\n    }\r\n\r\n    private fun showProgressDialog(\r\n        layout: Int\r\n    ) {\r\n        dialog = Dialog(requireContext())\r\n        with(dialog) {\r\n            this?.setContentView(layout)\r\n            this?.setCanceledOnTouchOutside(false)\r\n            this?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n        }\r\n        dialog?.show()\r\n    }\r\n}
===================================================================
diff --git a/feature-main/src/main/java/com/geektechkb/feature_main/presentation/ui/fragments/profil/profile/ProfileFragment.kt b/feature-main/src/main/java/com/geektechkb/feature_main/presentation/ui/fragments/profil/profile/ProfileFragment.kt
--- a/feature-main/src/main/java/com/geektechkb/feature_main/presentation/ui/fragments/profil/profile/ProfileFragment.kt	
+++ b/feature-main/src/main/java/com/geektechkb/feature_main/presentation/ui/fragments/profil/profile/ProfileFragment.kt	
@@ -192,8 +192,8 @@
                     } ?: avProfileImage.loadImageAndSetInitialsIfFailed(
                         profileImage,
                         name,
-                        cpiProfileImage,
-                        Color.rgb(83, 147, 208)
+//                        Color.rgb(83, 147, 208),
+                        cpiProfileImage
                     )
                     tvName.text = name
                     tvLastSeen.text = lastSeen
